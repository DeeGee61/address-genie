import { apiPlugin } from '@storyblok/js';
import { ArrayFn } from '@storyblok/js';
import { AsyncFn } from '@storyblok/js';
import { BlockTypes } from '@storyblok/js';
import { default as default_2 } from 'react';
import { ForwardRefExoticComponent } from 'react';
import { ISbAlternateObject } from '@storyblok/js';
import { ISbCache } from '@storyblok/js';
import { ISbConfig } from '@storyblok/js';
import { ISbContentMangmntAPI } from '@storyblok/js';
import { ISbDimensions } from '@storyblok/js';
import { ISbError } from '@storyblok/js';
import { ISbManagmentApiResult } from '@storyblok/js';
import { ISbResponse } from '@storyblok/js';
import { ISbResult } from '@storyblok/js';
import { ISbSchema } from '@storyblok/js';
import { ISbStories } from '@storyblok/js';
import { ISbStoriesParams } from '@storyblok/js';
import { ISbStory } from '@storyblok/js';
import { ISbStoryData } from '@storyblok/js';
import { ISbStoryParams } from '@storyblok/js';
import { ISbThrottle } from '@storyblok/js';
import { loadStoryblokBridge } from '@storyblok/js';
import { MarkTypes } from '@storyblok/js';
import { ReactNode } from 'react';
import { RefAttributes } from 'react';
import { registerStoryblokBridge } from '@storyblok/js';
import { renderRichText } from '@storyblok/js';
import { richTextResolver } from '@storyblok/js';
import { SbBlokData } from '@storyblok/js';
import { SbBlokKeyDataTypes } from '@storyblok/js';
import { SbSDKOptions } from '@storyblok/js';
import { StoryblokBridgeConfigV2 } from '@storyblok/js';
import { StoryblokBridgeV2 } from '@storyblok/js';
import { StoryblokClient } from '@storyblok/js';
import { StoryblokComponentType } from '@storyblok/js';
import { storyblokEditable } from '@storyblok/js';
import { StoryblokRichTextImageOptimizationOptions } from '@storyblok/js';
import { StoryblokRichTextNode } from '@storyblok/js';
import { StoryblokRichTextNode as StoryblokRichTextNode_2 } from '@storyblok/richtext';
import { StoryblokRichTextNodeResolver } from '@storyblok/js';
import { StoryblokRichTextNodeTypes } from '@storyblok/js';
import { StoryblokRichTextOptions } from '@storyblok/js';
import { StoryblokRichTextOptions as StoryblokRichTextOptions_2 } from '@storyblok/richtext';
import { StoryblokRichTextResolvers } from '@storyblok/js';
import { TextTypes } from '@storyblok/js';
import { useStoryblokBridge } from '@storyblok/js';

export { apiPlugin }

export { ArrayFn }

export { AsyncFn }

export { BlockTypes }

export declare const getComponent: (componentKey: string) => React.ElementType | false;

export declare const getCustomFallbackComponent: () => React.ElementType;

export declare const getEnableFallbackComponent: () => boolean;

export { ISbAlternateObject }

export { ISbCache }

export { ISbConfig }

export { ISbContentMangmntAPI }

export { ISbDimensions }

export { ISbError }

export { ISbManagmentApiResult }

export { ISbResponse }

export { ISbResult }

export { ISbSchema }

export { ISbStories }

export { ISbStoriesParams }

export { ISbStory }

export { ISbStoryData }

export { ISbStoryParams }

export { ISbThrottle }

export { loadStoryblokBridge }

export { MarkTypes }

export { registerStoryblokBridge }

export { renderRichText }

export { richTextResolver }

export { SbBlokData }

export { SbBlokKeyDataTypes }

export declare interface SbReactComponentsMap {
    [key: string]: default_2.ElementType;
}

export declare interface SbReactSDKOptions extends SbSDKOptions {
    components?: SbReactComponentsMap;
    enableFallbackComponent?: boolean;
    customFallbackComponent?: default_2.ElementType;
}

export { SbSDKOptions }

declare interface SbServerComponentProps extends Omit<Record<string, unknown>, 'blok'> {
    blok: SbBlokData;
}

export declare const setComponents: (newComponentsMap: SbReactComponentsMap) => Map<string, React.ElementType>;

export { StoryblokBridgeConfigV2 }

export { StoryblokBridgeV2 }

export { StoryblokClient }

export declare const StoryblokComponent: ForwardRefExoticComponent<Omit<StoryblokComponentProps, "ref"> & RefAttributes<HTMLElement>>;

declare interface StoryblokComponentProps extends Omit<Record<string, unknown>, 'blok'> {
    blok: SbBlokData;
}

export { StoryblokComponentType }

export { storyblokEditable }

export declare const storyblokInit: (pluginOptions?: SbReactSDKOptions) => (() => StoryblokClient);

export { StoryblokRichTextImageOptimizationOptions }

export { StoryblokRichTextNode }

export { StoryblokRichTextNodeResolver }

export { StoryblokRichTextNodeTypes }

export { StoryblokRichTextOptions }

export declare interface StoryblokRichTextProps {
    doc: StoryblokRichTextNode<default_2.ReactElement>;
    resolvers?: StoryblokRichTextResolvers<default_2.ReactElement>;
}

export { StoryblokRichTextResolvers }

export declare const StoryblokServerComponent: ForwardRefExoticComponent<Omit<SbServerComponentProps, "ref"> & RefAttributes<HTMLElement>>;

export declare const StoryblokServerRichText: default_2.ForwardRefExoticComponent<StoryblokRichTextProps & default_2.RefAttributes<HTMLDivElement>>;

/**
 * Shared server component for rendering Storyblok stories.
 * Works in both SSR and RSC contexts without server actions.
 */
export declare const StoryblokServerStory: ForwardRefExoticComponent<Omit<StoryblokServerStoryProps, "ref"> & RefAttributes<HTMLElement>>;

declare interface StoryblokServerStoryProps extends Omit<Record<string, unknown>, 'story'> {
    story: ISbStoryData;
}

export { TextTypes }

export declare type TUseStoryblokState = <T = void>(initialStory: ISbStoryData<T> | null, bridgeOptions?: StoryblokBridgeConfigV2) => ISbStoryData<T> | null;

declare const useStoryblokApi: () => StoryblokClient;
export { useStoryblokApi as getStoryblokApi }
export { useStoryblokApi }

export { useStoryblokBridge }

export declare const useStoryblokServerRichText: (options: StoryblokRichTextOptions_2<React.ReactElement>) => {
    render: (node: StoryblokRichTextNode_2<ReactNode>) => ReactNode;
};

export declare const useStoryblokState: TUseStoryblokState;

export { }
