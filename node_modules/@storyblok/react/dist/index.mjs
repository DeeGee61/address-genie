import { useState as f, useEffect as u } from "react";
import { registerStoryblokBridge as k } from "@storyblok/js";
import { BlockTypes as T, MarkTypes as B, TextTypes as E, apiPlugin as w, loadStoryblokBridge as C, registerStoryblokBridge as h, renderRichText as A, richTextResolver as I, storyblokEditable as L, useStoryblokBridge as F } from "@storyblok/js";
import { storyblokInit as _ } from "./core/init.mjs";
import { useStoryblokApi as m } from "./core/use-storyblok-api.mjs";
import { default as M } from "./core/storyblok-component.mjs";
import { useStoryblokState as V } from "./core/use-storyblok-state.mjs";
import { useStoryblokRichText as c } from "./richtext.mjs";
import { default as $ } from "./storyblok-rich-text.mjs";
import { convertAttributesInElement as q, isBridgeLoaded as z, isBrowser as D, isIframe as G, isServer as H, isVisualEditor as K } from "./utils.mjs";
import { getComponent as U, getCustomFallbackComponent as W, getEnableFallbackComponent as X, setComponents as Z } from "./core/state.mjs";
const x = (s, e = {}, o = {}) => {
  const [n, l] = f({}), i = typeof window < "u" && typeof window.storyblokRegisterEvent < "u", t = m();
  return u(() => {
    if (!t) {
      console.error(
        "You can't use useStoryblok if you're not loading apiPlugin."
      );
      return;
    }
    async function y() {
      const { data: r } = await t.get(
        `cdn/stories/${s}`,
        e
      );
      l(r.story), i && r.story.id && k(
        r.story.id,
        (a) => l(a),
        o
      );
    }
    y();
  }, [s, JSON.stringify(e), t]), t ? (o.resolveRelations = o.resolveRelations ?? e.resolve_relations, o.resolveLinks = o.resolveLinks ?? e.resolve_links, n) : null;
}, g = c;
export {
  T as BlockTypes,
  B as MarkTypes,
  M as StoryblokComponent,
  $ as StoryblokRichText,
  E as TextTypes,
  w as apiPlugin,
  q as convertAttributesInElement,
  U as getComponent,
  W as getCustomFallbackComponent,
  X as getEnableFallbackComponent,
  m as getStoryblokApi,
  z as isBridgeLoaded,
  D as isBrowser,
  G as isIframe,
  H as isServer,
  K as isVisualEditor,
  C as loadStoryblokBridge,
  h as registerStoryblokBridge,
  A as renderRichText,
  I as richTextResolver,
  Z as setComponents,
  L as storyblokEditable,
  _ as storyblokInit,
  x as useStoryblok,
  m as useStoryblokApi,
  F as useStoryblokBridge,
  c as useStoryblokRichText,
  g as useStoryblokRichTextResolver,
  V as useStoryblokState
};
