"use client";
import { loadStoryblokBridge as l, registerStoryblokBridge as d } from "@storyblok/js";
import { useEffect as c, startTransition as s } from "react";
import { isVisualEditor as u, isBridgeLoaded as f } from "../utils.mjs";
const E = ({ story: t = null, bridgeOptions: o = {} }) => {
  if (!u())
    return null;
  const r = (t == null ? void 0 : t.id) ?? 0;
  return c(() => {
    (async () => {
      f() || await l();
      const e = async (i) => {
        var n;
        if (i)
          try {
            const { liveEditUpdateAction: a } = await import("./live-edit-update-action.mjs");
            s(() => {
              a({ story: i, pathToRevalidate: window.location.pathname });
            });
          } catch (a) {
            console.warn("Server action not available, caching story locally:", a), i.uuid && ((n = globalThis.storyCache) == null || n.set(i.uuid, i));
          }
      };
      d(r, (i) => e(i), o);
    })();
  }, [r, JSON.stringify(o)]), null;
};
export {
  E as default
};
