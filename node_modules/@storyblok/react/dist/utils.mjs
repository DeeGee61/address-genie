import c from "react";
function u(e) {
  return e.replace(/-([a-z])/g, (o) => o[1].toUpperCase());
}
function f(e) {
  return e.split(";").reduce((o, i) => {
    let [t, n] = i.split(":");
    return t = t == null ? void 0 : t.trim(), n = n == null ? void 0 : n.trim(), t && n && (o[u(t)] = n), o;
  }, {});
}
function p(e) {
  if (Array.isArray(e))
    return e.map((r) => p(r));
  const o = {
    allowfullscreen: "allowFullScreen",
    autocomplete: "autoComplete",
    autofocus: "autoFocus",
    autoplay: "autoPlay",
    charset: "charSet",
    class: "className",
    colspan: "colSpan",
    colwidth: "colWidth",
    contenteditable: "contentEditable",
    crossorigin: "crossOrigin",
    enctype: "encType",
    for: "htmlFor",
    formnovalidate: "formNoValidate",
    frameborder: "frameBorder",
    inputmode: "inputMode",
    marginheight: "marginHeight",
    marginwidth: "marginWidth",
    maxlength: "maxLength",
    minlength: "minLength",
    novalidate: "noValidate",
    playsinline: "playsInline",
    readonly: "readOnly",
    referrerpolicy: "referrerPolicy",
    rowspan: "rowSpan",
    srcset: "srcSet",
    tabindex: "tabIndex",
    targetAttr: "targetattr",
    usemap: "useMap"
  }, i = Object.keys(e.props).reduce((r, a) => {
    let s = e.props[a];
    a === "style" && typeof s == "string" && (s = f(s));
    const d = o[a] || a;
    return r[d] = s, r;
  }, {});
  i.key = e.key;
  const t = c.Children.map(e.props.children, (r) => typeof r == "string" ? r : p(r));
  return c.createElement(e.type, i, t);
}
const l = () => typeof window < "u", y = () => typeof window > "u", g = () => l() && typeof window.storyblokRegisterEvent < "u", m = () => l() && window.self !== window.top, h = () => l() && m() && window.location.search.includes("_storyblok");
export {
  p as convertAttributesInElement,
  g as isBridgeLoaded,
  l as isBrowser,
  m as isIframe,
  y as isServer,
  h as isVisualEditor
};
